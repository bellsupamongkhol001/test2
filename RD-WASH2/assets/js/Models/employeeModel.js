// üìÅ assets/js/models/employeeModel.js
import { db } from "../firebase/firebaseConfig.js";
import {
  collection,
  doc,
  getDocs,
  getDoc,
  setDoc,
  updateDoc,
  deleteDoc,
  query,
  orderBy,
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-firestore.js";

const COLLECTION_NAME = "EmployeesDB";
const employeeCollection = collection(db, COLLECTION_NAME);

// ============================== üîÑ CRUD ==============================

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠)
 * @returns {Promise<Array>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function fetchAllEmployees() {
  const q = query(employeeCollection, orderBy("employeeName"));
  const snapshot = await getDocs(q);
  return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™ ID
 * @param {string} employeeId - ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
 * @returns {Promise<Object|null>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
export async function fetchEmployeeById(id) {
  if (!id) return null;
  const snap = await getDoc(doc(db, "EmployeesDB", id));
  return snap.exists() ? { id: snap.id, ...snap.data() } : null;
}


/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô doc ID)
 * @param {Object} employeeData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
export async function createEmployee(data) {
  const docRef = doc(db, "EmployeesDB", data.employeeId);
  const snapshot = await getDoc(docRef);
  if (snapshot.exists()) {
    throw new Error(`Employee ID ${data.employeeId} already exists`);
  }
  await setDoc(docRef, data);
}


/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™
 * @param {string} employeeId - ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 * @param {Object} updateData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
async function updateEmployee(employeeId, updateData) {
  if (!employeeId) throw new Error("‚ö†Ô∏è Employee ID is required for update");
  await updateDoc(doc(db, COLLECTION_NAME, employeeId), updateData);
}

/**
 * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™
 * @param {string} employeeId - ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 */
async function deleteEmployee(employeeId) {
  if (!employeeId) throw new Error("‚ö†Ô∏è Employee ID is required for deletion");
  await deleteDoc(doc(db, COLLECTION_NAME, employeeId));
}

// ============================== üñºÔ∏è IMAGE UTILS ==============================

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô Base64 (Data URL)
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Firestore ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Firebase Storage
 * 
 * @param {File} file - ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 * @returns {Promise<string>} ‡∏Ñ‡πà‡∏≤ Base64 string ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
async function convertImageToBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = () => resolve(reader.result);
    reader.onerror = reject;

    reader.readAsDataURL(file);
  });
}

// ============================== üìë CSV PARSER ==============================

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° CSV ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö header: employeeId, employeeName, employeeDept
 *
 * @param {string} csvText - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 * @returns {Array<Object>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
 */
function parseCSV(csvText) {
  const rows = csvText.trim().split("\n");
  const headers = rows[0].split(",").map((h) => h.trim().toLowerCase());

  return rows.slice(1).map((line) => {
    const values = line.split(",");
    const employee = {};

    headers.forEach((header, i) => {
      const value = values[i]?.trim() ?? "";

      switch (header) {
        case "employeeid":
          employee.employeeId = value;
          break;
        case "employeename":
          employee.employeeName = value;
          break;
        case "employeedept":
          employee.employeeDept = value;
          break;
      }
    });

    return employee;
  });
}


// ============================== ‚úÖ VALIDATION ==============================

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ employeeId, employeeName, ‡πÅ‡∏•‡∏∞ employeeDept
 *
 * @param {Object} emp - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
 * @returns {boolean} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isValidEmployee(emp) {
  return (
    Boolean(emp?.employeeId?.trim()) &&
    Boolean(emp?.employeeName?.trim()) &&
    Boolean(emp?.employeeDept?.trim())
  );
}

// ============================== üì¶ EMPLOYEE MODEL ==============================
/**
 * ‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
 * - ‡∏î‡∏∂‡∏á / ‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö
 * - ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô Base64
 * - Import/Export CSV
 * - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */

export const EmployeeModel = {
  fetchAllEmployees,
  fetchEmployeeById,
  createEmployee,
  updateEmployee,
  deleteEmployee,
  parseCSV,
  convertImageToBase64,
  isValidEmployee,
};

