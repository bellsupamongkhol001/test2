import { EmployeeModel } from "../Models/employeeModel.js";
import { EmployeeView } from "../Views/employeeView.js";

const DEFAULT_PROFILE = "https://cdn-icons-png.flaticon.com/512/1077/1077114.png";
let selectedEmployeeId = null;

export async function initEmployeePage() {
  try {
    EmployeeView.showLoading();
    setupEvents();
    const employees = await EmployeeModel.fetchAllEmployees();
    EmployeeView.renderTable(employees);
  } catch (error) {
    console.error("‚ùå Error loading Employee page:", error);
    Swal.fire({
      icon: "error",
      title: "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
      text: error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    });
  } finally {
    EmployeeView.hideLoading();
  }
}

async function reloadTable() {
  try {
    const employees = await EmployeeModel.fetchAllEmployees();
    EmployeeView.renderTable(employees);
  } catch (err) {
    console.error("‚ùå reloadTable error:", err);
    Swal.fire({
      icon: "error",
      title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
    });
  }
}
window.reloadEmployeeTable = reloadTable;

function setupEvents() {
  document.querySelector(".btn-add")?.addEventListener("click", () => {
    try {
      selectedEmployeeId = null;
      EmployeeView.resetForm();
      EmployeeView.setModalTitle("Add Employee", "fas fa-user-plus");
      EmployeeView.toggleModal("employeeFormModal", true);
      EmployeeView.initDropzone();
  
      console.log("üßë‚Äçüíº ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà");
    } catch (err) {
      console.error("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏° Add Employee ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
        customClass: {
          popup: "swal-on-top"
        }
      });
    }
  });  

  document.querySelector("#cancelBtn")?.addEventListener("click", () => {
    try {
      EmployeeView.toggleModal("employeeFormModal", false);
    } catch (err) {
      console.error("‚ùå ‡∏õ‡∏¥‡∏î Modal ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ",
      });
    }
  });
  

  document.querySelector("#searchEmployee")?.addEventListener("input", async (e) => {
    try {
      const keyword = e.target.value.toLowerCase().trim();
      if (!keyword) {
        const employees = await EmployeeModel.fetchAllEmployees();
        return EmployeeView.renderTable(employees);
      }
  
      const employees = await EmployeeModel.fetchAllEmployees();
      const filtered = employees.filter(
        (emp) =>
          emp.employeeId.toLowerCase().includes(keyword) ||
          emp.employeeName.toLowerCase().includes(keyword)
      );
  
      EmployeeView.renderTable(filtered);
    } catch (err) {
      console.error("‚ùå Search error:", err);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
        text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
      });
    }
  });
  

  document.querySelector(".btn-import")?.addEventListener("click", () => {
    try {
      const input = document.createElement("input");
      input.type = "file";
      input.accept = ".csv";
  
      input.addEventListener("change", async (e) => {
        const file = e.target.files[0];
        if (!file) return;
  
        EmployeeView.showLoading();
  
        try {
          const text = await file.text();
          const records = EmployeeModel.parseCSV(text);
          let count = 0;
          let skipped = 0;
  
          for (const emp of records) {
            if (EmployeeModel.isValidEmployee(emp)) {
              emp.photoURL = DEFAULT_PROFILE;
  
              const exists = await EmployeeModel.fetchEmployeeById(emp.employeeId);
              if (!exists) {
                await EmployeeModel.createEmployee(emp);
                count++;
              } else {
                skipped++;
                console.warn(`üö´ Duplicate ID skipped: ${emp.employeeId}`);
              }
            } else {
              console.warn(`‚ö†Ô∏è Invalid employee skipped:`, emp);
            }
          }
  
          Swal.fire({
            icon: "success",
            title: `‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
            html: `
              <b>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà:</b> ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>
              <b>‡∏ã‡πâ‡∏≥/‡∏Ç‡πâ‡∏≤‡∏°:</b> ${skipped} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            `,
            timer: 3000,
            showConfirmButton: false,
          });
  
          await reloadTable();
        } catch (err) {
          console.error("‚ùå CSV Import Error:", err);
          Swal.fire({
            icon: "error",
            title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
          });
        } finally {
          EmployeeView.hideLoading();
        }
      });
  
      input.click();
    } catch (outerErr) {
      console.error("‚ùå Import CSV outer error:", outerErr);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: outerErr.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ",
      });
    }
  });

  document.querySelector(".btn-export")?.addEventListener("click", async () => {
    try {
      EmployeeView.showLoading();
  
      const employees = await EmployeeModel.fetchAllEmployees();
  
      if (!employees || employees.length === 0) {
        return Swal.fire({
          icon: "info",
          title: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
          text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ",
        });
      }

      const result = await Swal.fire({
        title: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å",
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      });

      if (result.isConfirmed) {
        const url = EmployeeView.exportEmployeesToCSV(employees,[
          "employeeId",
          "employeeName",
          "employeeDept",
        ]);
      const link = document.createElement("a");
      link.href = url;
      link.download = "employees.csv";
      link.click();
      URL.revokeObjectURL(url);
  
      Swal.fire({
        icon: "success",
        title: "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: `‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${employees.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        timer: 2000,
        showConfirmButton: false,
      });
    }
  
    } catch (err) {
      console.error("‚ùå Export Error:", err);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
      });
    } finally {
      EmployeeView.hideLoading();
    }
  });
  

  document.querySelector("#employeeForm")?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const form = e.target;
    const file = document.getElementById("employeePhoto")?.files[0];

    const employeeData = {
      employeeId: form.employeeId.value.trim(),
      employeeName: form.employeeName.value.trim(),
      employeeDept: form.employeeDept.value.trim(),
      photoURL: "",
    };

    if (!EmployeeModel.isValidEmployee(employeeData)) {
      return Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö",
        timer: 2000,
        showConfirmButton: false,
      });
    }

    EmployeeView.setFormLoading(true);

    try {
      if (!selectedEmployeeId) {
        const exists = await EmployeeModel.fetchEmployeeById(employeeData.employeeId);
        if (exists) {
          EmployeeView.setFormLoading(false);
          return Swal.fire({
            icon: "warning",
            title: "‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥",
            text: `Employee ID "${employeeData.employeeId}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`,
          });
        }
      }

      employeeData.photoURL = file
        ? await EmployeeModel.convertImageToBase64(file)
        : DEFAULT_PROFILE;

      if (selectedEmployeeId) {
        await EmployeeModel.updateEmployee(selectedEmployeeId, employeeData);
      } else {
        await EmployeeModel.createEmployee(employeeData);
      }

      await reloadTable();
      EmployeeView.toggleModal("employeeFormModal", false);

      Swal.fire({
        icon: "success",
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        timer: 1500,
        showConfirmButton: false,
      });
    } catch (err) {
      console.error("‚ùå Save Error:", err);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
      });
    } finally {
      EmployeeView.setFormLoading(false);
    }
  });
}

window.handleEditById = async (employeeId) => {
  try {
    const employee = await EmployeeModel.fetchEmployeeById(employeeId);
    if (!employee) {
      return Swal.fire({
        icon: "warning",
        title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        text: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${employeeId}`,
      });
    }

    selectedEmployeeId = employeeId;

    const form = document.querySelector("#employeeForm");
    form.employeeId.value = employee.employeeId;
    form.employeeId.disabled = true;
    form.employeeName.value = employee.employeeName;
    form.employeeDept.value = employee.employeeDept;

    const preview = document.getElementById("previewPhoto");
    if (employee.photoURL) {
      preview.src = employee.photoURL;
      preview.style.display = "block";
    }
    else{
      preview.src = "";
      preview.style.display = "none";
    }

    EmployeeView.setModalTitle("Edit Employee", "fas fa-user-edit");
    EmployeeView.toggleModal("employeeFormModal", true);
    EmployeeView.initDropzone();

  } catch (err) {
    console.error("‚ùå Edit error:", err);
    Swal.fire({
      icon: "error",
      title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
    });
  }
};

window.promptDeleteEmployee = async (employeeId) => {
  try {
    const result = await Swal.fire({
      title: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•?',
      text: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });

    if (result.isConfirmed) {
      await EmployeeModel.deleteEmployee(employeeId);
      await reloadTable();
      Swal.fire({
        icon: "success",
        title: "‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        timer: 1500,
        showConfirmButton: false,
      });
    }
  } catch (err) {
    console.error("‚ùå Delete error:", err);
    Swal.fire({
      icon: "error",
      title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      text: err.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
    });
  }
};