import {
  doc,
  getDoc,
  setDoc,
  updateDoc,
  collection,
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-firestore.js";
import {db} from "../firebase/firebaseConfig.js";

// ============================ üìÖ FORMAT DATE ============================
/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ISO string ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/mm/yyyy (‡πÑ‡∏ó‡∏¢)
 * @param {string} isoString - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO ‡πÄ‡∏ä‡πà‡∏ô "2025-04-18T10:00:00Z"
 * @returns {string} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/mm/yyyy ‡∏´‡∏£‡∏∑‡∏≠ "-" ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
export function formatDate(isoString) {
  if (!isoString) return "-";
  const date = new Date(isoString);
  return date.toLocaleDateString("th-TH", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  });
}
  
  // ============================ üÜî GENERATE WASH ID ============================
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏ä‡πà‡∏ô "WASH-250418-007"
 * @param {string} prefix - ‡∏Ñ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô WASH ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÜ)
 * @returns {string} ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö PREFIX-YYMMDD-XXX
 */
export async function generateWashId(prefix = "WASH") {
  const now = new Date();
  const y = now.getFullYear().toString().slice(0);
  const m = (now.getMonth() + 1).toString().padStart(2, "0");
  const d = now.getDate().toString().padStart(2, "0");
  const datePart = `${y}${m}${d}`;
  const counterKey = `${prefix}-${datePart}`;

  const counterRef = doc(db, "WashCounters", counterKey);
  const washCollection = collection(db, "WashDB");

  let currentCounter = 1;

  while (true) {
    const countPart = currentCounter.toString().padStart(3, "0");
    const candidateId = `${prefix}-${datePart}-${countPart}`;

    const candidateRef = doc(washCollection, candidateId);
    const candidateSnap = await getDoc(candidateRef);

    if (!candidateSnap.exists()) {
      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏•‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏à‡∏£‡∏¥‡∏á
      await setDoc(counterRef, { last: currentCounter });
      return candidateId;
    }

    currentCounter++;
  }
}


// ============================ ‚ùì SHOW CONFIRM MODAL ============================
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (Yes / Cancel)
 * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Modal
 * @param {Function} onConfirm - Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Yes
 */
export function showConfirmModal(message = "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", onConfirm) {
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á element modal
  const modal = document.createElement("div");
  modal.className = "overlay";

  modal.innerHTML = `
    <div class="confirm-box">
      <p>${message}</p>
      <div class="confirm-actions">
        <button class="btn-yes">Yes</button>
        <button class="btn-no">Cancel</button>
      </div>
    </div>
  `;

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô document
  document.body.appendChild(modal);

  // ‚òëÔ∏è ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Yes ‚Üí callback ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏¥‡∏î modal
  modal.querySelector(".btn-yes").addEventListener("click", () => {
    modal.remove();
    if (typeof onConfirm === "function") onConfirm();
  });

  // ‚òëÔ∏è ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Cancel ‚Üí ‡πÅ‡∏Ñ‡πà‡∏õ‡∏¥‡∏î modal
  modal.querySelector(".btn-no").addEventListener("click", () => {
    modal.remove();
  });

  // ‚òëÔ∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å modal ‚Üí ‡∏õ‡∏¥‡∏î modal
  modal.addEventListener("click", (e) => {
    if (e.target === modal) modal.remove();
  });
}

// ============================ ‚è≥ SHOW LOADING ============================
/**
 * ‡πÅ‡∏™‡∏î‡∏á Loading Overlay ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î
 */
export function showLoading(message = "‚è≥ Processing...") {
  const overlay = document.getElementById("loadingOverlay");
  if (!overlay) {
    console.warn("‚ö†Ô∏è loadingOverlay ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô DOM");
    return;
  }

  overlay.style.display = "flex";

  const messageEl = overlay.querySelector("p");
  if (messageEl) messageEl.textContent = message;
}

// ============================ ‚úÖ HIDE LOADING ============================
/**
 * ‡∏ã‡πà‡∏≠‡∏ô Loading Overlay ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
 */
export function hideLoading() {
  const overlay = document.getElementById("loadingOverlay");
  if (!overlay) {
    console.warn("‚ö†Ô∏è loadingOverlay ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô DOM");
    return;
  }
  overlay.style.display = "none";
}

// ============================ üóëÔ∏è CONFIRM DELETE MODAL ============================
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {string} id - ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 * @param {function} onConfirmCallback - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
 */
export function confirmDeleteModal(id, onConfirmCallback) {
  const modal = document.getElementById("confirmModal");
  if (!modal) return;

  modal.style.display = "flex";

  const yesBtn = document.getElementById("btnConfirmYes");
  const noBtn = document.getElementById("btnConfirmNo");

  if (!yesBtn || !noBtn) return;

  // üîÑ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå event ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ modal ‡∏õ‡∏¥‡∏î
  const cleanup = () => {
    modal.style.display = "none";
    yesBtn.onclick = null;
    noBtn.onclick = null;
  };

  // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏ï‡∏Å‡∏•‡∏á
  yesBtn.onclick = async () => {
    cleanup();
    await onConfirmCallback(id);
  };

  // ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
  noBtn.onclick = cleanup;

  // ‚ú® ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á
  modal.onclick = (e) => {
    if (e.target === modal) cleanup();
  };
}

// ============================ ‚è≥ GET STATUS FROM DATE ============================
/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 * - ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö 3 ‡∏ß‡∏±‡∏ô ‚Üí "Completed"
 * - ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö 1 ‡∏ß‡∏±‡∏ô ‚Üí "Washing"
 * - ‡∏´‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô ‚Üí "Waiting to Send"
 * 
 * ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "Scrap" ‡∏´‡∏£‡∏∑‡∏≠ "ESD Passed" ‚Üí ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
 *
 * @param {object} wash - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ createdAt ‡πÅ‡∏•‡∏∞ status)
 * @returns {string} - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
 */
export function getStatusFromDate(wash) {
  if (!wash.createdAt || wash.status === "Scrap" || wash.status === "ESD Passed") {
    return wash.status; // ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  }

  const created = new Date(wash.createdAt);
  const now = new Date();
  const diffInDays = Math.floor((now - created) / (1000 * 60 * 60 * 24));

  if (diffInDays >= 3) return "Completed";
  if (diffInDays >= 1) return "Washing";
  return "Waiting to Send";
}

  