// ==================== Firebase Setup ====================
// üîß ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase ‡πÅ‡∏•‡∏∞ Firestore Database

// ‚úÖ 1. ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Firebase App SDK ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ initialize Firebase app
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";

// ‚úÖ 2. ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏Ç‡∏≠‡∏á Firestore (Database) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
import {
  getFirestore,     // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firestore Database
  collection,       // ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π Collection (‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
  doc,              // ‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏∏ ID
  addDoc,           // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ Firebase ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  deleteDoc,        // ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô Firestore
  getDocs,          // ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Collection
  getDoc,           // ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏∏ ID ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  setDoc,           // ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
  updateDoc,        // ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  query,            // ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  where,            // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô query ‡πÄ‡∏ä‡πà‡∏ô field == value
  increment,      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  deleteField
} from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";

// ‚úÖ 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Config ‡∏Ç‡∏≠‡∏á Firebase (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Project ‡∏Ç‡∏≠‡∏á Firebase Console)
const firebaseConfig = {
  apiKey: "AIzaSyAvJ4SgGaazPf6mY4G5-QfWcX2Yhkg-1X0",             // üîë ‡∏£‡∏´‡∏±‡∏™ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
  authDomain: "rd-wash-v2.firebaseapp.com",                      // üåê ‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
  projectId: "rd-wash-v2",                                       // üè∑Ô∏è ‡∏ä‡∏∑‡πà‡∏≠ Project ID
  storageBucket: "rd-wash-v2.firebasestorage.app",               // ‚òÅÔ∏è ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û/‡πÑ‡∏ü‡∏•‡πå (Firebase Storage)
  messagingSenderId: "553662948172",                             // üì± ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Push Notification (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ)
  appId: "1:553662948172:web:2423d7a81f2bbc9d53a5e9",             // üÜî App ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡πÉ‡∏ô Firebase
};

// ‚úÖ 4. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase App ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
const app = initializeApp(firebaseConfig);

// ‚úÖ 5. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firestore (‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) ‡∏à‡∏≤‡∏Å Firebase App ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á
const db = getFirestore(app);

// ‚úÖ 6. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πà‡∏≠ Collection ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
const COLLECTIONS = {
  WASHES: "washJobs",          // üìÅ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  EMPLOYEES: "EmployeesDB",      // üë• ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  UNIFORMCODES: "InventoryDB",    // üéΩ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°
  UNIFORM: "UniformsDB",
};

// ======================================================
// üì¶ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Collection ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
// ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö collection ‡πÄ‡∏ä‡πà‡∏ô "washJobs", "employees", "uniformCodes"
// ======================================================
async function getAll(collectionName) {
  try {
    const querySnapshot = await getDocs(collection(db, collectionName)); // üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô collection ‡∏ô‡∏±‡πâ‡∏ô
    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })); // üîÅ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö array ‡∏Ç‡∏≠‡∏á object (‡∏£‡∏ß‡∏° id ‡∏î‡πâ‡∏ß‡∏¢)
  } catch (error) {
    console.error("‚ùå Error getting documents:", error); // üõë ‡πÅ‡∏™‡∏î‡∏á error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    throw error;
  }
} //OK

// ======================================================
// ‚úèÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore (‡∏£‡∏∞‡∏ö‡∏∏ ID ‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ)
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô collection
// ======================================================
async function put(collectionName, id, data) {
  try {
    const docRef = doc(db, collectionName, id); // üîó ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ id ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
    await setDoc(docRef, data); // üíæ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°)
    console.log(`‚úÖ Document written with ID: ${id}`);
  } catch (error) {
    console.error("‚ùå Error adding/updating document:", error);
    throw error;
  }
} //x

// ======================================================
// üóë ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å Firestore (‡∏ï‡∏≤‡∏° ID ‡πÅ‡∏•‡∏∞ Collection)
// ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°
// ======================================================
async function remove(collectionName, id) {
  try {
    const docRef = doc(db, collectionName, id); // üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á document ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    await deleteDoc(docRef); // ‚ùå ‡∏•‡∏ö document ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Firestore
    console.log(`‚úÖ Document with ID: ${id} has been deleted.`);
  } catch (error) {
    console.error("‚ùå Error deleting document:", error);
    throw error;
  }
} //x

// ======================================================
// üîç ‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å Firestore ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
// ======================================================
async function getById(collectionName, id) {
  console.log(`üìÑ Getting document from ${collectionName} with ID: ${id}`);
  const docRef = doc(db, collectionName, id); // üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const docSnap = await getDoc(docRef); // üì¶ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Firestore
  if (!docSnap.exists()) {
    console.warn("‚ö†Ô∏è Document ID not found:", id); // ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    return null;
  }
  return docSnap.data(); // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö object
}

// ======================================================
// üéΩ ‡∏î‡∏∂‡∏á‡∏ä‡∏∏‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ uniformCode ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏µ)
// ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ã‡∏±‡∏Å
// ======================================================
async function getUniformByCode(code) {
  try {
    console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ uniformCode:", code);
    const uniformQuery = query(
      collection(db, COLLECTIONS.UNIFORMCODES),       // üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°
      where("uniformCode", "==", code)            // üéØ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ code ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    );
    const snapshot = await getDocs(uniformQuery);

    if (snapshot.empty) {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∏‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™:", code);
      return [];
    }

    return snapshot.docs.map((doc) => doc.data()); // üîÅ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô array
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
    return [];
  }
}

// ======================================================
// üë§ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å uniformCode
// ‡πÉ‡∏ä‡πâ‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÉ‡∏Ñ‡∏£
// ======================================================
async function getOwnerByUniformCode(code) {
  try {
    const stockQuery = query(
      collection(db, COLLECTIONS.UNIFORMCODES),
      where("uniformCode", "==", code)
    );

    const snapshot = await getDocs(stockQuery);

    if (snapshot.empty) {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏´‡∏±‡∏™:", code);
      return [];
    }

    return snapshot.docs.map((doc) => doc.data()); // üîÅ ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö array
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î:", error);
    return [];
  }
}

// ======================================================
// üë∑‚Äç‚ôÇÔ∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (employeeId)
// ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° assign ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// ======================================================
async function getEmployeeById(empId) {
  try {
    const empRef = doc(db, COLLECTIONS.EMPLOYEES, empId); // üîó ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á document ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const empDoc = await getDoc(empRef); // üìÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
    if (!empDoc.exists()) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™: ${empId}`);
      return null;
    }
    return empDoc.data(); // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:", error);
    return null;
  }
}

// ===========================================================
// üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
// ===========================================================
async function initWashPage() {
  try {
    console.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤...");

    setupListeners();       // üß© 1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    await renderTable();    // üìä 2. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (washJobs)
    await renderHistory();  // üßæ 3. ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ESD (washHistory)
    await updateSummary();  // üìå 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô dashboard

    console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  } catch (error) {
    console.error("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Wash:", error);
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
  }
}

// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å initWashPage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î DOM ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
document.addEventListener("DOMContentLoaded", initWashPage);

// ===========================================================
// ü™ü ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤
// ===========================================================
function toggleModal(show) {
  const modal = document.getElementById("Modal");
  modal.style.display = show ? "flex" : "none"; // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πà‡∏≠‡∏ô modal
  if (!show) clearForm(); // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î modal ‚Üí ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
}

// ===========================================================
// üìù ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ID ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
// ===========================================================
async function openForm(id = null) {
  clearForm(); // ‚ú® ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô

  // üñã ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á Modal ‡πÄ‡∏õ‡πá‡∏ô Add ‡∏´‡∏£‡∏∑‡∏≠ Edit
  document.getElementById("modalTitle").innerText = id
    ? "Edit Wash"
    : "Add Wash";

  if (id) {
    try {
      const data = await getById(COLLECTIONS.WASHES, id); // üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

      if (data) {
        // üßë‚Äçüíº ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        document.getElementById("editIndex").value = id;
        document.getElementById("empId").value = data.empId;
        document.getElementById("empName").value = data.empName;
        document.getElementById("uniformCode").value = data.uniformCode;
        document.getElementById("qty").value = data.qty;

        const colorSelect = document.getElementById("color");
        const selectedColor = data.color || "";

        // üé® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏°‡∏µ‡πÉ‡∏ô dropdown ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        let found = false;
        for (let option of colorSelect.options) {
          if (option.value === selectedColor) {
            found = true;
            break;
          }
        }

        // üü° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏° option ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        if (!found && selectedColor) {
          const newOption = document.createElement("option");
          newOption.value = selectedColor;
          newOption.textContent = selectedColor;
          colorSelect.appendChild(newOption);
        }

        // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
        colorSelect.value = selectedColor;
      } else {
        alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
      }
    } catch (error) {
      console.error("‚ùå Error fetching data for edit:", error);
    }
  }

  toggleModal(true); // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
}

// ===========================================================
// üìù ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ID ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
// ===========================================================


function setupListeners() {
  // üîç ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å renderTable() ‡πÅ‡∏ö‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 300ms (debounce)
  document
    .getElementById("search")
    ?.addEventListener("input", debounce(renderTable, 300));

  // üìä ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å filter ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  document
    .getElementById("filterStatus")
    ?.addEventListener("change", renderTable);

  // üé´ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏° ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å autofill ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  document
    .getElementById("uniformCode")
    ?.addEventListener("input", debounce(autofillUniformInfo, 300));

  // üíæ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Save ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô saveWash()
  document.getElementById("saveBtn")?.addEventListener("click", saveWash);

  // üé® ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î + ‡∏™‡∏µ
  document
    .getElementById("color")
    .addEventListener("change", fetchEmployeeByColor);

  // ‚éã ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î ESC ‚Üí ‡∏õ‡∏¥‡∏î modal
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      toggleModal(false);
    }
  });
}


function getStatusFromCreatedAt(
  createdAtISO,
  rewashCount = 0,
  esdTestResult = "",
  currentStatus = ""
) {
  const now = new Date();
  const created = new Date(createdAtISO);
  rewashCount = rewashCount || 0;
  esdTestResult = esdTestResult || "";
  currentStatus = currentStatus || "";

  if (isNaN(created.getTime())) {
    console.error("Invalid createdAt date passed:", createdAtISO);
    return "Unknown Status";
  }

  const diffDays = Math.floor((now - created) / (1000 * 60 * 60 * 24));
  const lowerStatus = (currentStatus || "").toLowerCase();

  // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡πà‡∏≤‡∏ô ESD
  if (esdTestResult === "Pass") return "Completed";

  // ‚ùå ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ESD ‚Üí Scrap
  if (rewashCount >= 3 && esdTestResult === "Fail") return "Scrap";

  // ‚úÖ ‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ß‡∏±‡∏ô ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ Completed
  if (diffDays >= 4) return "Completed";

  // üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ã‡∏±‡∏Å
  const isWaiting =
    lowerStatus === "waiting to send" ||
    lowerStatus.startsWith("waiting rewash");

  if (isWaiting) {
    if (diffDays < 1) {
      return rewashCount > 0
        ? `Waiting Rewash #${rewashCount}`
        : "Waiting to Send";
    } else {
      return rewashCount > 0 ? `Washing #${rewashCount}` : "Washing";
    }
  }

  // üü° ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Rewash ‚Üí ‡πÅ‡∏™‡∏î‡∏á Washing #n
  if (lowerStatus === "washing" && rewashCount > 0) {
    return `Washing #${rewashCount}`;
  }

  return currentStatus || "Unknown Status";
}

// ===================== üìã RENDER WASH TABLE =====================
async function renderTable() {
  const tbody = document.getElementById("washTableBody");
  const keyword = document.getElementById("search").value.toLowerCase();
  const filterStatus = document.getElementById("filterStatus").value;

  // üìÑ ‡πÅ‡∏™‡∏î‡∏á Loading ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  tbody.innerHTML =
    "<tr><td colspan='8' style='text-align: center;'>Loading data...</td></tr>";

  try {
    // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wash ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
    const allWashesRaw = await getAll(COLLECTIONS.WASHES);

    // 2Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á
    const allWashes = await Promise.all(
      allWashesRaw.map(async (wash) => {
        if (!wash || !wash.washId) return null;

        const calculatedStatus = getStatusFromCreatedAt(
          wash.createdAt,
          wash.rewashCount || 0,
          wash.esdTestResult || "",
          wash.status || ""
        );

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        if (wash.status !== calculatedStatus) {
          await updateDoc(doc(db, COLLECTIONS.WASHES, wash.washId), {
            status: calculatedStatus,
          });
        }

        wash.status = calculatedStatus;
        if (!wash.empName) wash.empName = "N/A";
        return wash;
      })
    );

    // 3Ô∏è‚É£ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const validWashes = allWashes.filter((wash) => wash !== null);
    const finalData = validWashes.filter((wash) => {
      const matchesKeyword =
        (wash.empName || "").toLowerCase().includes(keyword) ||
        (wash.washId || "").toLowerCase().includes(keyword);

      const matchesStatus =
        !filterStatus || filterStatus === "All"
          ? true
          : (wash.status || "").toLowerCase() === filterStatus.toLowerCase();

      return matchesKeyword && matchesStatus;
    });

    // 4Ô∏è‚É£ Pagination
    const totalItems = finalData.length;
    const startIndex = (currentPage - 1) * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    const pageData = finalData.slice(startIndex, endIndex);

    tbody.innerHTML = "";

    if (pageData.length === 0) {
      const tr = document.createElement("tr");
      tr.innerHTML = `<td colspan="8" style="text-align: center; vertical-align: middle;">No data found</td>`;
      tbody.appendChild(tr);
    } else {
      pageData.forEach((wash) => {
        const tr = document.createElement("tr");
        const statusLower = (wash.status || "").toLowerCase();
        const esdTested = wash.esdTestResult === "Pass" || wash.esdTestResult === "Fail";

        const viewButton = `<button onclick="openForm('${wash.washId}')" ${
          statusLower === "completed" || statusLower === "scrap" ? "disabled" : ""
        }>${statusLower === "completed" || statusLower === "scrap" ? "View" : "Edit"}</button>`;

        const deleteButton = `<button onclick="showDeleteModal('${wash.washId}')">Delete</button>`;
        const shiftDateButtons = `
          <button title="Subtract 1 day" onclick="shiftWashDate('${wash.washId}', -1)">‚¨ÖÔ∏è</button> 
          <button title="Add 1 day" onclick="shiftWashDate('${wash.washId}', 1)">‚û°Ô∏è</button>`;
        const esdButton = `<button onclick="showESDModal('${wash.washId}')">ESD</button>`;
        const returnButton = `<button onclick="returnUniform('${wash.washId}')">Return</button>`;

        // üß† ‡∏à‡∏±‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        let actionButtonsHTML = "";
        if (statusLower === "waiting to send" || statusLower.startsWith("waiting rewash")) {
          actionButtonsHTML = `${viewButton} ${deleteButton} ${shiftDateButtons}`;
        } else if (statusLower === "washing") {
          actionButtonsHTML = `${shiftDateButtons}`;
        } else if (statusLower === "completed") {
          actionButtonsHTML = wash.esdTestResult === "Pass"
            ? `${returnButton} ${shiftDateButtons}`
            : `${esdButton} ${shiftDateButtons}`;
        } else if (statusLower === "scrap") {
          actionButtonsHTML = ``;
        } else {
          actionButtonsHTML = `<span>No actions</span>`;
        }

        // üé® ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß
        tr.innerHTML = `
          <td>${wash.washId || "-"}</td>
          <td>${wash.empId || "-"}</td>
          <td>${wash.empName || "-"}</td>
          <td>${wash.uniformCode || "-"}</td>
          <td>${wash.color || "-"}</td>
          <td>${wash.qty || "-"}</td>
          <td>${wash.status || "Unknown"}</td>
          <td class="action-buttons">${actionButtonsHTML}</td>
        `;
        tbody.appendChild(tr);
      });
    }

    renderPagination(totalItems, currentPage, rowsPerPage);
  } catch (error) {
    console.error("‚ùå Error rendering table:", error);
    tbody.innerHTML = `<tr><td colspan="8" style="text-align: center; color: red;">Error loading data: ${error.message}</td></tr>`;
  }
}


// üîÑ ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
let currentHistoryPage = 1;             // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤ 1
const historyRowsPerPage = 5;           // ‡πÅ‡∏™‡∏î‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡∏ï‡πà‡∏≠ 1 ‡∏´‡∏ô‡πâ‡∏≤

// üìò ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤
async function renderHistory() {
  // üëâ ‡∏î‡∏∂‡∏á element ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞ pagination
  const tableBody = document.getElementById("historyTableBody");
  const pagination = document.getElementById("historyPagination");

  // ‚ùó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
  if (!tableBody || !pagination) {
    console.error("History table body or pagination element not found.");
    return;
  }

  // üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
  pagination.innerHTML = "";
  tableBody.innerHTML = "";

  try {
    // üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å collection "washHistory"
    const history = await getAll("washHistory");

    // üì≠ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "No history found"
    if (history.length === 0) {
      const tr = document.createElement("tr");
      tr.innerHTML = `<td colspan="7" style="text-align: center; vertical-align: middle;">No history found</td>`;
      tableBody.appendChild(tr);
      return;
    }

    // üîÉ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤ ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö ESD
    history.sort((a, b) => new Date(b.testDate) - new Date(a.testDate));

    // üìê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const totalPages = Math.ceil(history.length / historyRowsPerPage);       // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const start = (currentHistoryPage - 1) * historyRowsPerPage;             // index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const end = start + historyRowsPerPage;                                  // index ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
    const pageData = history.slice(start, end);                              // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    // üñ®Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    pageData.forEach((entry) => {
      const tr = document.createElement("tr");
      tr.innerHTML = `
        <td style="text-align: center; vertical-align: middle;">${entry.washId}</td>
        <td style="text-align: center; vertical-align: middle;">${entry.uniformCode}</td>
        <td style="text-align: center; vertical-align: middle;">${entry.empName || "-"} (${entry.empId || "-"})</td>
        <td style="text-align: center; vertical-align: middle;">${entry.testResult}</td>
        <td style="text-align: center; vertical-align: middle;">${entry.testDate}</td>
        <td style="text-align: center; vertical-align: middle;">${entry.status}</td>
      `;
      tableBody.appendChild(tr);  // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏•‡∏á‡πÉ‡∏ô tbody
    });

    // üî¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° pagination ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement("button");
      btn.textContent = i;
      btn.className = i === currentHistoryPage ? "active" : "";   // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      btn.onclick = () => {
        currentHistoryPage = i;   // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
        renderHistory();          // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      };
      pagination.appendChild(btn);  // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á DOM
    }
  } catch (error) {
    // üßØ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console
    console.error("‚ùå Error rendering history:", error);
  }
}

// üìò ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// üìò ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function updateSummary() {
  try {
    // üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å collection washJobs ‡πÅ‡∏•‡∏∞ washHistory
    const washesRaw = await getAll(COLLECTIONS.WASHES);     // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• wash ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const history = await getAll("washHistory");            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥

    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á null / undefined ‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
    const washes = (washesRaw || []).filter(w => w && typeof w === 'object');

    // üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    const total = washes.length;
    const waiting = washes.filter((w) => w.status?.includes("Waiting")).length;
    const washing = washes.filter((w) => w.status === "Washing").length;
    const completed = washes.filter((w) => w.status === "Completed").length;
    const rewash = washes.filter((w) => w.status?.includes("Rewash")).length;
    const scrap = washes.filter((w) => w.status === "Scrap").length;
    const historyCount = (history || []).length;

    // üñ•Ô∏è ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡∏ö‡∏ô Dashboard
    document.getElementById("sumTotal").textContent = total;
    document.getElementById("sumWaiting").textContent = waiting;
    document.getElementById("sumWashing").textContent = washing;
    document.getElementById("sumCompleted").textContent = completed;
    document.getElementById("sumRewash").textContent = rewash;
    document.getElementById("sumScrap").textContent = scrap;
    document.getElementById("sumHistory").textContent = historyCount;

  } catch (error) {
    // üßØ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    console.error("‚ùå Error updating summary:", error);
  }
}


// üìò ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô debounce ‡∏ä‡πà‡∏ß‡∏¢‡∏ä‡∏∞‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞ "‡∏´‡∏¢‡∏∏‡∏î" ‡∏û‡∏¥‡∏°‡∏û‡πå
function debounce(fn, delay) {
  let timer;  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö timeout ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤

  return function () {
    clearTimeout(timer);  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ timer ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏¥‡πâ‡∏á (‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥)
    timer = setTimeout(() => fn.apply(this, arguments), delay);  
    // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fn ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡πâ‡∏ß delay ms
  };
}

async function autofillUniformInfo() {
  const code = document.querySelector("#uniformCode")?.value.trim();
  const colorSelect = document.querySelector("#color");

  if (!code) return;

  if (!colorSelect) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element #color");
    return;
  }

  try {
    const querySnapshot = await getDocs(
      query(
        collection(db, COLLECTIONS.UNIFORMCODES),
        where("uniformCode", "==", code)
      )
    );

    if (querySnapshot.empty) {
      console.warn("üõë ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°:", code);
      colorSelect.innerHTML = '<option value="">No Color Available</option>';
      colorSelect.disabled = true;

      document.querySelector("#empId").value = "";
      document.querySelector("#empName").value = "";
      document.querySelector("#qty").value = 1;
      return;
    }

    const colors = [...new Set(querySnapshot.docs.map((doc) => doc.data().color))];
    colorSelect.innerHTML = '<option value="">Select Color</option>';
    colors.forEach((color) => {
      const option = document.createElement("option");
      option.value = color;
      option.textContent = color;
      colorSelect.appendChild(option);
    });

    colorSelect.disabled = false;
    colorSelect.focus();
  } catch (err) {
    console.error("‚ùå Error during autofill:", err);
    alert("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Uniform");
  }
}

// ‚úÖ Trigger ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ö‡πà‡∏≠‡∏¢
document.getElementById("uniformCode").addEventListener("keydown", function (e) {
  if (e.key === "Enter") {
    e.preventDefault();
    autofillUniformInfo();
  }
});



let currentPage = 1;
const rowsPerPage = 10;

// üìò ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤ (pagination) ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function renderPagination(totalItems, current, perPage) {
  const pagination = document.getElementById("pagination"); // div ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°

  // ‚ùó ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ element ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á error
  if (!pagination) {
    console.error("Pagination element not found.");
    return;
  }

  // üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
  pagination.innerHTML = "";

  const totalPages = Math.ceil(totalItems / perPage); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

  // üìå ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà 1 ‡∏´‡∏ô‡πâ‡∏≤ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á pagination
  if (totalPages <= 1) return;

  // ‚èÆ First Page Button
  const firstPageBtn = document.createElement("button");
  firstPageBtn.innerText = "First";
  firstPageBtn.className = current === 1 ? "disabled" : ""; // ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
  firstPageBtn.onclick = async () => {
    currentPage = 1;
    await renderTable();
  };
  pagination.appendChild(firstPageBtn);

  // ‚óÄÔ∏è Previous Page Button
  const prevPageBtn = document.createElement("button");
  prevPageBtn.innerText = "Previous";
  prevPageBtn.className = current === 1 ? "disabled" : "";
  prevPageBtn.onclick = async () => {
    if (current > 1) currentPage--;
    await renderTable();
  };
  pagination.appendChild(prevPageBtn);

  // üî¢ ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏á ‡πÜ
  for (let i = 1; i <= totalPages; i++) {
    const btn = document.createElement("button");
    btn.innerText = i;
    btn.className = i === current ? "active" : ""; // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    btn.onclick = async () => {
      currentPage = i;
      await renderTable();
    };

    pagination.appendChild(btn);

    // üí° ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏≤‡∏á ‡πÜ (‡πÄ‡∏û‡∏∑‡πà‡∏≠ UI ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°)
    if (totalPages > 5 && i > 3 && i < totalPages - 2) {
      if (i !== current) {
        btn.style.display = "none"; // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°
      }
    }
  }

  // ‚ñ∂Ô∏è Next Page Button
  const nextPageBtn = document.createElement("button");
  nextPageBtn.innerText = "Next";
  nextPageBtn.className = current === totalPages ? "disabled" : "";
  nextPageBtn.onclick = async () => {
    if (current < totalPages) currentPage++;
    await renderTable();
  };
  pagination.appendChild(nextPageBtn);

  // ‚è≠ Last Page Button
  const lastPageBtn = document.createElement("button");
  lastPageBtn.innerText = "Last";
  lastPageBtn.className = current === totalPages ? "disabled" : "";
  lastPageBtn.onclick = async () => {
    currentPage = totalPages;
    await renderTable();
  };
  pagination.appendChild(lastPageBtn);
}


function showDeleteModal(id) {
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á overlay modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const modal = document.createElement("div");
  modal.className = "overlay"; // ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏°‡∏∑‡∏î

  // ‚úÖ ‡πÉ‡∏™‡πà HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  modal.innerHTML = `
    <div class="confirm-box">
      <h3>Delete Confirmation</h3>
      <p>Are you sure you want to delete this wash job?</p>
      <div>
        <button class="btn-yes" onclick="confirmDelete('${id}', this, true)">Yes</button>
        <button class="btn-no" id="cancelButton">Cancel</button>
      </div>
    </div>
  `;

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° modal ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  document.body.appendChild(modal);

  // üõë ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Cancel ‚Üí ‡∏õ‡∏¥‡∏î modal
  document.getElementById("cancelButton").addEventListener("click", function () {
    closeModal(this);
  });

  // üì¶ ‡∏õ‡∏¥‡∏î modal ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á modal
  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeModal(e.target);
    }
  });
}

function closeModal(modalElement) {
  // ‚úÖ ‡∏´‡∏≤ element ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô overlay (‡∏ï‡∏±‡∏ß‡∏Ñ‡∏£‡∏≠‡∏ö modal)
  const overlay = modalElement.closest(".overlay");

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DOM
  if (overlay) {
    overlay.remove();
  } else {
    // ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô console
    console.error("Overlay element not found.");
  }
}

async function confirmDelete(id, button, confirmed = false) {
  try {
    // ‚ùó ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (confirmed = false) ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    if (!confirmed) return;

    // ‚úÖ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô Firestore ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
    const washDocRef = doc(db, COLLECTIONS.WASHES, id);
    console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ID: ${id}`);

    // ‚úÖ ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Firestore
    await deleteDoc(washDocRef);
    console.log(`‚úÖ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ID: ${id} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß.`);

    // ‚úÖ ‡∏õ‡∏¥‡∏î modal
    closeModal(button);

    // üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ
    await renderTable();
    await updateSummary();

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    showNotificationModal("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
  } catch (error) {
    // ‚ùå ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ log
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:", error);
    showNotificationModal("‚ùå ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.");
  }
}

async function confirmESD(id, passed, button = null) {
  const washDocRef = doc(db, COLLECTIONS.WASHES, id);
  const washDoc = await getDoc(washDocRef);

  if (!washDoc.exists()) {
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wash ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
    if (button) closeModal(button);
    return;
  }

  const washData = washDoc.data();
  const { uniformCode, color, qty } = washData;
  let   rewashCount = washData.rewashCount || 0;
  let status = "";

  if (passed) {
    status = "Completed";
    rewashCount = 0;

    // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ Stock ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô ESD
    await returnToStockAfterESD(id);
  } else {
    // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ Rewash
    rewashCount += 1;

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ uniforms (‡∏ô‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å code + color)
    await increaseRewashCount(uniformCode, color);

    if (rewashCount >= 3) {
      status = "Scrap";

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí Scrap
      await markAsScrap(id);
      if (button) closeModal(button);
      return;
    } else {
      status = `Rewash #${rewashCount}`;
    }
  }

  // üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ESD ‡∏•‡∏á‡πÉ‡∏ô washHistory
  const historyData = {
    ...washData,
    testResult: passed ? "Pass" : "Fail",
    testDate: new Date().toISOString(),
    status,
    rewashCount,
  };

  await setDoc(doc(db, "washHistory", id), historyData);

  // üßπ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å washJobs
  await deleteDoc(washDocRef);

  if (button) closeModal(button);

  alert(`‚úÖ ‡∏ú‡∏• ESD: ${passed ? "‡∏ú‡πà‡∏≤‡∏ô" : "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"} | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status}`);
  await renderTable();
  await renderHistory();
  await updateSummary();

    console.log("üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Wash ID:", id); 
}

async function exportHistoryToCSV() {
  try {
    // üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å collection "washHistory"
    const querySnapshot = await getDocs(collection(db, "washHistory"));

    // ‚ùå ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô history ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    if (querySnapshot.empty) {
      return alert("No history data to export.");
    }

    // üóÉ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô Firestore ‚Üí Object array
    const data = querySnapshot.docs.map((doc) => doc.data());

    // üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á header (‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå) ‡∏à‡∏≤‡∏Å key ‡∏Ç‡∏≠‡∏á object ‡πÅ‡∏£‡∏Å
    const headers = Object.keys(data[0]);
    const csvRows = [headers.join(",")]; // ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á CSV

    // üßæ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô CSV string ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
    data.forEach((row) => {
      const values = headers.map(
        (header) => `"${(row[header] || "").toString().replace(/"/g, '""')}"`
      );
      csvRows.push(values.join(",")); // ‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    });

    // üß∑ ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° CSV
    const csvData = csvRows.join("\n");

    // üíæ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Blob ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    const blob = new Blob([csvData], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `wash_history_${new Date().toISOString().slice(0, 10)}.csv`;
    link.click();
  } catch (error) {
    console.error("‚ùå Error exporting history to CSV:", error);
    alert("‚ùå Error exporting history. Please try again.");
  }
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Export CSV ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏´‡∏•‡∏±‡∏á DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", () => {
  // üß± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  const exportBtn = document.createElement("button");
  exportBtn.className = "btn-export";
  exportBtn.innerHTML = '<i class="fas fa-file-csv"></i> Export CSV';

  // ‚èØ ‡∏ú‡∏π‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô exportHistoryToCSV ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
  exportBtn.onclick = exportHistoryToCSV;

  // üì¶ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÄ‡∏ä‡πà‡∏ô div#exportArea)
  document.getElementById("exportArea")?.appendChild(exportBtn);
});

async function saveWash() {
  const color = document.getElementById("color").value;
  const uniformCode = document.getElementById("uniformCode").value.trim();
  const empId = document.getElementById("empId").value.trim();
  const qty = parseInt(document.getElementById("qty").value) || 1;
  const empName = document.getElementById("empName").value.trim();

  if (!empId || !uniformCode || !qty || !color) {
    alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
    return;
  }

  const washId = `WASH-${Date.now()}`;

  try {
    // üîç ‡∏î‡∏∂‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å InventoryDB
    const uniformQuery = query(
      collection(db, COLLECTIONS.UNIFORMCODES),
      where("uniformCode", "==", uniformCode),
      where("color", "==", color)
    );
    const uniformSnap = await getDocs(uniformQuery);

    if (uniformSnap.empty) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô InventoryDB");
      return;
    }

    const uniformDoc = uniformSnap.docs[0];
    const uniformData = uniformDoc.data();

    // ‚ùå ‡∏ñ‡πâ‡∏≤‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÇ‡∏î‡∏ô Scrap ‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡∏±‡∏Å‡∏ã‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô 3
    if (uniformData.status === "scrap" || uniformData.rewashCount >= 3) {
      alert("‚ùå ‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å Scrap ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡∏±‡∏Å‡∏ã‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ qty ‡∏û‡∏≠
    const currentQty = uniformData.qty || 0;
    if (currentQty < qty) {
      alert(`‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏≠ (‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ${currentQty} ‡∏ä‡∏∏‡∏î)`);
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥: ‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (empId + uniformCode + color)
    const duplicateCheck = query(
      collection(db, COLLECTIONS.WASHES),
      where("empId", "==", empId),
      where("uniformCode", "==", uniformCode),
      where("color", "==", color)
    );
    const duplicateSnap = await getDocs(duplicateCheck);
    if (!duplicateSnap.empty) {
      alert("‚ö†Ô∏è ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
      return;
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ rewashCount ‡∏à‡∏≤‡∏Å InventoryDB
    let rewashCount = uniformData.rewashCount || 0;

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å
    await setDoc(doc(db, COLLECTIONS.WASHES, washId), {
      washId,
      empId,
      empName,
      uniformCode,
      color,
      qty,
      createdAt: new Date().toISOString(),
      status: "Waiting to Send",
      rewashCount
    });

    // ‚úÖ ‡∏ï‡∏±‡∏î‡∏¢‡∏≠‡∏î qty ‡∏à‡∏≤‡∏Å InventoryDB ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏±‡∏Å
    await updateDoc(doc(db, COLLECTIONS.UNIFORMCODES, uniformDoc.id), {
      qty: increment(-qty),
      employeeId: empId,
      employeeName: empName,
      status: "in-use/washing",
      washStatus: "washing"
    });

    toggleModal(false);
    await renderTable();
    await updateSummary();

    alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
  } catch (error) {
    console.error("‚ùå saveWash error:", error);
    alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å");
  }
}



async function loadColorsForUniform() {
  const uniformCode = document.getElementById("uniformCode").value.trim();
  const colorSelect = document.getElementById("color");

  // ‚ùå ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏° ‚Üí ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå dropdown ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  if (!uniformCode) {
    colorSelect.innerHTML = '<option value="">Select Color</option>';
    colorSelect.disabled = true;
    return;
  }

  try {
    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ uniform ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™
    const querySnapshot = await getDocs(
      query(
        collection(db, COLLECTIONS.UNIFORMCODES),
        where("uniformCode", "==", uniformCode)
      )
    );

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!querySnapshot.empty) {
      // üîÑ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "color" ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      const colors = querySnapshot.docs.map((doc) => doc.data().color);
      const uniqueColors = [...new Set(colors)];

      // üß© ‡πÄ‡∏ï‡∏¥‡∏° dropdown ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
      colorSelect.innerHTML = '<option value="">Select Color</option>';
      uniqueColors.forEach((color) => {
        const option = document.createElement("option");
        option.value = color;
        option.textContent = color;
        colorSelect.appendChild(option);
      });

      colorSelect.disabled = false;
    } else {
      // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö uniform ‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô + ‡∏õ‡∏¥‡∏î dropdown
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö UniformCode ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
      colorSelect.innerHTML = '<option value="">No Color Available</option>';
      colorSelect.disabled = true;
    }
  } catch (err) {
    console.error("‚ùå Error loading colors:", err);
    alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏µ");
  }
}

async function fetchEmployeeByColor() {
  const uniformCode = document.getElementById("uniformCode").value.trim();
  const color = document.getElementById("color").value;

  // ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô
  if (!uniformCode || !color) return;

  try {
    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ uniform ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const querySnapshot = await getDocs(
      query(
        collection(db, COLLECTIONS.UNIFORMCODES),
        where("uniformCode", "==", uniformCode),
        where("color", "==", color)
      )
    );

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î ‚Üí ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
    if (!querySnapshot.empty) {
      const data = querySnapshot.docs[0].data();
      document.getElementById("empId").value = data.employeeId || "-";
      document.getElementById("empName").value = data.employeeName || "-";
      document.getElementById("qty").value = data.qty || 1;
    } else {
      // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‚Üí ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤
      alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
      document.getElementById("empId").value = "";
      document.getElementById("empName").value = "";
      document.getElementById("qty").value = 1;
    }
  } catch (err) {
    console.error("‚ùå Error fetching employee:", err);
    alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô");
  }
}


async function shiftWashDate(washId, dayOffset) {
  try {
    const washRef = doc(db, COLLECTIONS.WASHES, washId);
    const snap = await getDoc(washRef);
    if (!snap.exists()) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wash");
      return;
    }

    const washData = snap.data();
    const currentStatus = washData.status || "Waiting to Send";
    const currentCreatedAt = new Date(washData.createdAt || new Date());
    const originalDate = new Date(currentCreatedAt); // üìå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô

    // üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° offset (‡πÄ‡∏ä‡πà‡∏ô -1 ‡∏´‡∏£‡∏∑‡∏≠ +1)
    const newDate = new Date(currentCreatedAt);
    newDate.setDate(newDate.getDate() + dayOffset);
    const newDateISO = newDate.toISOString();
    const formattedNewDate = newDate.toLocaleDateString("th-TH");

    // ‚ùì ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô
    const confirmChange = confirm(
      `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ${originalDate.toLocaleDateString(
        "th-TH"
      )} ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô ${formattedNewDate} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n(‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ 'Waiting to Send' ‡∏´‡∏£‡∏∑‡∏≠ 'Washing')`
    );
    if (!confirmChange) return;

    let statusToUpdate = currentStatus; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°

    // üîÑ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    const currentStatusLower = currentStatus.toLowerCase();
    const timeDependentStatuses = ["waiting to send", "washing"];

    if (timeDependentStatuses.includes(currentStatusLower)) {
      const now = new Date();
      const diffDays = Math.floor(
        (now.getTime() - newDate.getTime()) / (1000 * 60 * 60 * 24)
      );

      // üü¢ ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ß‡∏±‡∏ô ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ Completed
      if (diffDays >= 3) {
        statusToUpdate = "Completed";
      }
      // üîµ ‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ß‡∏±‡∏ô ‚Üí Washing
      else if (diffDays >= 1) {
        statusToUpdate = "Washing";
      }
      // üü° ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‚Üí Waiting
      else {
        statusToUpdate = "Waiting to Send";
      }

      console.log(
        `Date shifted. Recalculated time-based status to: ${statusToUpdate}`
      );
    } else {
      console.log(
        `Date shifted. Status '${currentStatus}' is not time-dependent, keeping current status.`
      );
    }

    // ‚úèÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ Firebase
    await updateDoc(washRef, {
      createdAt: newDateISO,
      status: statusToUpdate,
    });

    // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    alert(
      `‚úÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${formattedNewDate} ${
        statusToUpdate !== currentStatus
          ? `‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô '${statusToUpdate}'`
          : "(‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°)"
      }`
    );

    await renderTable();
    await updateSummary();
  } catch (error) {
    console.error("‚ùå Error shifting wash date and updating status:", error);
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: " + error.message);
  }
}

async function markReadyForTest(washId) {
  // üîí ‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const confirmed = confirm(
    `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ Wash ID: ${washId} ‡∏ã‡∏±‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö ESD ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
  );
  if (!confirmed) return; // ‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å

  try {
    const washDocRef = doc(db, COLLECTIONS.WASHES, washId);

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "Ready for Test"
    await updateDoc(washDocRef, { status: "Ready for Test" });

    alert(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Wash ID: ${washId} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô 'Ready for Test' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    await renderTable();     // üîÅ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    await updateSummary();   // üîÅ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏£‡∏∏‡∏õ
  } catch (error) {
    console.error("‚ùå Error marking wash as Ready for Test:", error);
    alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: " + error.message);
  }
}


async function returnToStockAfterESD(washId) {
  // üìå 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏à‡∏≤‡∏Å washJobs
  const washRef = doc(db, COLLECTIONS.WASHES, washId);
  const washSnap = await getDoc(washRef);
  if (!washSnap.exists()) {
    alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏±‡∏Å‡∏£‡∏´‡∏±‡∏™ ${washId}`);
    return;
  }

  const washData = washSnap.data();
  const { uniformCode, color, qty } = washData;

  // üìå 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏™‡∏µ
  const uniformQuery = query(
    collection(db, COLLECTIONS.UNIFORMCODES),
    where("uniformCode", "==", uniformCode),
    where("color", "==", color)
  );
  const uniformSnap = await getDocs(uniformQuery);
  if (uniformSnap.empty) {
    alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°: ${uniformCode} (${color})`);
    return;
  }

  const uniformDoc = uniformSnap.docs[0];
  const uniformId = uniformDoc.id;

  // üìå 3. ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ stock ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏° availableQty, ‡∏•‡∏î washingQty, ‡∏•‡πâ‡∏≤‡∏á status
  await updateDoc(doc(db, COLLECTIONS.UNIFORMCODES, uniformId), {
    availableQty: increment(qty),
    washingQty: increment(-qty),
    "status.assign": deleteField(),
    "status.washing": deleteField(),
  });

  // üìå 4. ‡∏•‡∏ö job ‡∏ã‡∏±‡∏Å‡∏≠‡∏≠‡∏Å
  await deleteDoc(washRef);

  // üìå 5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalQty ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á
  await updateTotalQty(uniformCode, color);

  alert(`‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß (${uniformCode} | ${color})`);
  await renderTable();
  await updateSummary();
}

async function markAsScrap(washId) {
  try {
    const washRef = doc(db, COLLECTIONS.WASHES, washId);
    const washSnap = await getDoc(washRef);
    if (!washSnap.exists()) {
      alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏±‡∏Å‡∏£‡∏´‡∏±‡∏™ ${washId}`);
      return;
    }

    const washData = washSnap.data();
    const { uniformCode, color } = washData;

    const uniformQuery = query(
      collection(db, COLLECTIONS.UNIFORMCODES),
      where("uniformCode", "==", uniformCode),
      where("color", "==", color)
    );

    const uniformSnap = await getDocs(uniformQuery);
    if (uniformSnap.empty) {
      alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏° ${uniformCode} (${color})`);
      return;
    }

    const uniformDoc = uniformSnap.docs[0];
    const uniformId = uniformDoc.id;

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô scrap (‡πÅ‡∏ï‡πà **‡πÑ‡∏°‡πà‡∏•‡∏ö** employeeId / employeeName)
    await updateDoc(doc(db, COLLECTIONS.UNIFORMCODES, uniformId), {
      "status.assign": deleteField(),
      "status.washing": deleteField(),
      status: "scrap",
      usageStatus: "scrap"
    });

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á washHistory ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Scrap
    const historyData = {
      ...washData,
      testResult: "Fail",
      testDate: new Date().toISOString(),
      status: "Scrap",
    };

    await setDoc(doc(db, "washHistory", washId), historyData);

    // ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å washJobs
    await deleteDoc(washRef);

    alert(`‚ö†Ô∏è ‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏° ${uniformCode} ‡∏ñ‡∏π‡∏Å Scrap ‡πÅ‡∏•‡πâ‡∏ß`);
    await renderTable();
    await updateSummary();
    await renderHistory();
  } catch (error) {
    console.error("‚ùå markAsScrap Error:", error);
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Scrap ‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ");
  }
}

function showESDModal(id) {
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á overlay modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏• ESD
  const modal = document.createElement("div");
  modal.className = "overlay";

  // ‚úÖ HTML ‡∏Ç‡∏≠‡∏á modal ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° OK / NG
  modal.innerHTML = `
    <div class="confirm-box">
      <h3>ESD Result Confirmation</h3>
      <p>Did this uniform pass the ESD test?</p>
      <div>
        <button class="btn-yes" onclick="confirmESD('${id}', true, this)">OK</button>
        <button class="btn-no" onclick="confirmESD('${id}', false, this)">NG</button>
      </div>
    </div>
  `;

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á modal ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  document.body.appendChild(modal);

  // ‚úÖ ‡∏õ‡∏¥‡∏î modal ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á
  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeModal(e.target);
    }
  });
}

// ===========================================================
// üßΩ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ô Modal ‚Üí ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
// ===========================================================
function clearForm() {
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á text ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  ["empId", "empName", "uniformCode", "qty", "editIndex"].forEach((id) => {
    const el = document.getElementById(id);
    if (el) el.value = "";
  });

  // ‡∏•‡πâ‡∏≤‡∏á dropdown ‡∏™‡∏µ (reset ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
  const colorSelect = document.getElementById("color");
  if (colorSelect) {
    colorSelect.value = "";
    colorSelect.selectedIndex = 0;
  }
}

async function updateTotalQty(uniformCode, color) {
  try {
    // üîç ‡∏î‡∏∂‡∏á‡∏ä‡∏∏‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏™‡∏µ
    const uniformQuery = query(
      collection(db, COLLECTIONS.UNIFORMCODES),
      where("uniformCode", "==", uniformCode),
      where("color", "==", color)
    );
    const uniformSnap = await getDocs(uniformQuery);

    if (uniformSnap.empty) {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°:", uniformCode, color);
      return;
    }

    const docSnap = uniformSnap.docs[0];
    const docId = docSnap.id;
    const data = docSnap.data();

    // üìä ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î: available + washing + scrap
    const available = data.availableQty || 0;
    const washing = data.washingQty || 0;
    const scrap = data.scrapQty || 0;

    const totalQty = available + washing + scrap;

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï totalQty
    await updateDoc(doc(db, COLLECTIONS.UNIFORMCODES, docId), {
      totalQty: totalQty
    });

    console.log(`üîÑ ‡∏õ‡∏£‡∏±‡∏ö totalQty = ${totalQty} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${uniformCode} (${color})`);
  } catch (error) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï totalQty ‡πÑ‡∏î‡πâ:", error);
  }
}

function showNotificationModal(message) {
  const modal = document.createElement("div");
  modal.className = "overlay";
  modal.innerHTML = `
    <div class="confirm-box">
      <p>${message}</p>
      <div style="text-align: center; margin-top: 10px;">
        <button class="btn-yes">OK</button>
      </div>
    </div>
  `;
  document.body.appendChild(modal);

  modal.querySelector(".btn-yes").addEventListener("click", () => {
    modal.remove();
  });

  modal.addEventListener("click", (e) => {
    if (e.target === modal) modal.remove();
  });
}

// ‡∏î‡∏∂‡∏á rewashCount ‡∏à‡∏≤‡∏Å uniform ‡∏ï‡∏≤‡∏° code + color
async function getRewashCount(uniformCode, color) {
  const uniformQuery = query(
    collection(db, COLLECTIONS.UNIFORMCODES),
    where("uniformCode", "==", uniformCode),
    where("color", "==", color)
  );

  const snapshot = await getDocs(uniformQuery);
  if (snapshot.empty) return 0;

  const data = snapshot.docs[0].data();
  return data.rewashCount || 0;
}

// ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ rewashCount
async function setRewashCount(uniformCode, color, count) {
  const uniformQuery = query(
    collection(db, COLLECTIONS.UNIFORMCODES),
    where("uniformCode", "==", uniformCode),
    where("color", "==", color)
  );

  const snapshot = await getDocs(uniformQuery);
  if (!snapshot.empty) {
    const docId = snapshot.docs[0].id;
    await updateDoc(doc(db, COLLECTIONS.UNIFORMCODES, docId), {
      rewashCount: count
    });
  }
}

async function increaseRewashCount(uniformCode, color) {
  try {
    const q = query(
      collection(db, COLLECTIONS.UNIFORMCODES),
      where("uniformCode", "==", uniformCode),
      where("color", "==", color)
    );
    const snap = await getDocs(q);

    // ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ document ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (snap.empty) {
      const docId = `${uniformCode}-${color}-${Date.now()}`;
      await setDoc(doc(db, COLLECTIONS.UNIFORMCODES, docId), {
        uniformCode,
        color,
        rewashCount: 1,
      });
      console.warn("‚ö†Ô∏è Document not found, created new with rewashCount = 1");
      return;
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‚Üí update ‡πÄ‡∏û‡∏¥‡πà‡∏° 1
    const docId = snap.docs[0].id;
    await updateDoc(doc(db, COLLECTIONS.UNIFORMCODES, docId), {
      rewashCount: increment(1),
    });

    console.log(`üîÅ ‡πÄ‡∏û‡∏¥‡πà‡∏° rewashCount ‡πÉ‡∏´‡πâ ${uniformCode} (${color})`);
  } catch (error) {
    console.error("‚ùå increaseRewashCount error:", error.message);
  }
}


async function returnUniform(washId) {
  try {
    const washRef = doc(db, COLLECTIONS.WASHES, washId);
    const washSnap = await getDoc(washRef);

    if (!washSnap.exists()) {
      alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏£‡∏´‡∏±‡∏™ ${washId}`);
      return;
    }

    const washData = washSnap.data();
    const { uniformCode, color } = washData;

    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Uniform ‡πÉ‡∏ô InventoryDB
    const uniformQuery = query(
      collection(db, COLLECTIONS.UNIFORMCODES),
      where("uniformCode", "==", uniformCode),
      where("color", "==", color)
    );
    const uniformSnap = await getDocs(uniformQuery);

    if (uniformSnap.empty) {
      alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°: ${uniformCode} (${color})`);
      return;
    }

    const uniformDoc = uniformSnap.docs[0];
    const uniformId = uniformDoc.id;

    // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á InventoryDB ‚Üí ‡∏ú‡∏π‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    await updateDoc(doc(db, COLLECTIONS.UNIFORMCODES, uniformId), {
      employeeId: washData.previousOwner?.employeeId || null,
      employeeName: washData.previousOwner?.employeeName || null,
      status: "in-use",
      washStatus: null
      // ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° qty
    });

    // üßπ ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡∏≠‡∏≠‡∏Å (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    await deleteDoc(washRef);

    alert(`‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏° ${uniformCode} (${color}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    await renderTable();
    await updateSummary();
  } catch (error) {
    console.error("‚ùå returnUniform error:", error);
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ");
  }
}

async function fullyReturnToOwner(washId) {
  try {
    const washRef = doc(db, COLLECTIONS.WASHES, washId);
    const washSnap = await getDoc(washRef);
    if (!washSnap.exists()) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏ô‡∏µ‡πâ");
      return;
    }

    const washData = washSnap.data();
    const { uniformCode, color, empId, empName, qty } = washData;

    // üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å UniformCode
    const uniformQuery = query(
      collection(db, COLLECTIONS.UNIFORMCODES),
      where("uniformCode", "==", uniformCode),
      where("color", "==", color)
    );
    const uniformSnap = await getDocs(uniformQuery);

    if (uniformSnap.empty) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UniformCode ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô");
      return;
    }

    const uniformDoc = uniformSnap.docs[0];
    const uniformId = uniformDoc.id;

    // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
    await updateDoc(doc(db, COLLECTIONS.UNIFORMCODES, uniformId), {
      qty: increment(qty),              // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
      employeeId: empId,                // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
      employeeName: empName,
      status: "in-use",                 // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      washStatus: null                  // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ã‡∏±‡∏Å
    });

    // ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    await addDoc(collection(db, COLLECTIONS.WASHHISTORY), {
      ...washData,
      returnedAt: new Date().toISOString(),
      action: "returned"
    });

    // ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    await deleteDoc(washRef);

    await renderTable();
    await renderHistory();
    await updateSummary();

    alert("‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  } catch (error) {
    console.error("‚ùå fullyReturnToOwner error:", error);
    alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∏‡∏î");
  }
}

async function confirmESDResult(washId, result) {
  if (result === "pass") {
    // ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô ESD ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    await fullyReturnToOwner(washId);
  } else {
    // ‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å rewash logic
    await handleRewashLogic(washId);
  }
}


// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å HTML ‡πÑ‡∏î‡πâ
window.markReadyForTest = markReadyForTest;
window.openForm = openForm;
window.showDeleteModal = showDeleteModal;
window.confirmDelete = confirmDelete;
window.showESDModal = showESDModal;
window.confirmESD = confirmESD;
window.saveWash = saveWash;
window.exportHistoryToCSV = exportHistoryToCSV;
window.toggleModal = toggleModal;
window.shiftWashDate = shiftWashDate;
window.loadColorsForUniform = loadColorsForUniform;
window.fetchEmployeeByColor = fetchEmployeeByColor;
window.updateTotalQty = updateTotalQty;
window.showNotificationModal = showNotificationModal;
window.increaseRewashCount = increaseRewashCount;
