import {
  doc,
  updateDoc,
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-firestore.js";
import { db } from "./firebaseConfig.js";

import {
  getAllWashes,
  getWashJobById,
  addWashJob,
  updateWashJob,
  deleteWashJob,
  addToWashHistory,
  getUniformByCode,
  incrementRewashCount,
  scrapUniform,
  setRewashCount,
  returnToStockAfterESD,
  getAllWashHistory,
  getRewashCount,
} from "./washModel.js";

import {
  renderWashTable,
  renderWashHistory,
  renderWashSummary,
  renderPagination,
  openESDModal,
} from "./washView.js";

import {
  debounce,
  showToast,
  formatDate,
  generateWashId,
  showLoading,
  hideLoading,
  confirmDeleteModal,
  getStatusFromDate,
} from "./washUtils.js";

// üì¶ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
let currentPage = 1;
const rowsPerPage = 10;

export async function initWashPage() {
  try {
    showLoading("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ Wash...");

    setupEventListeners();

    const washData = await getAllWashes();
    const historyData = await getAllWashHistory();

    await renderWashTable(washData);
    await renderWashHistory(historyData);
    await renderWashSummary(washData);
  } catch (error) {
    console.error("‚ùå Error loading Wash page:", error);
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wash");
  } finally {
    hideLoading();
  }
}

// ‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Event ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function setupEventListeners() {
  document
    .getElementById("search")
    ?.addEventListener("input", debounce(renderWashTable, 300));

  document
    .getElementById("filterStatus")
    ?.addEventListener("change", renderWashTable);

  document
    .getElementById("btnSaveWash")
    ?.addEventListener("click", saveWashJob);

  document.getElementById("uniformCode")?.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      autofillUniformInfo();
    }
  });

  document
    .getElementById("color")
    ?.addEventListener("change", autofillEmployeeInfo);

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") toggleModal(false);
  });

  document
    .getElementById("btnAddWash")
    .addEventListener("click", openAddWashModal);

  document.getElementById("btnCloseModal")?.addEventListener("click", () => {
    toggleModal(false);
  });

  document.querySelectorAll(".btn-esd-fail").forEach((btn) => {
    btn.addEventListener("click", async (e) => {
      const washId = e.target.dataset.id;
      await handleESDTestFail(washId);
    });
  });

  //‡∏ó‡∏î‡∏™‡∏≠‡∏ö
}

// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
async function saveWashJob() {
  const uniformCode = document.getElementById("uniformCode").value.trim();
  const color = document.getElementById("color").value;
  const empId = document.getElementById("empId").value.trim();
  const empName = document.getElementById("empName").value.trim();
  const size = document.getElementById("size")?.value.trim() || "";

  if (!uniformCode || !color || !empId) {
    showToast("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö", "warning");
    return;
  }

  try {
    showLoading("üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...");

    const allWashes = await getAllWashes();
    const duplicate = allWashes.find(
      (w) =>
        w.uniformCode === uniformCode &&
        w.color === color &&
        w.status !== "ESD Passed" &&
        w.status !== "Scrap"
    );

    if (duplicate) {
      showToast("‚ùå ‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å", "error");
      hideLoading();
      return;
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ rewashCount ‡∏à‡∏≤‡∏Å InventoryDB
    const rewashCount = await getRewashCount(uniformCode, color);

    let status = "Waiting to Send";
    if (rewashCount > 0) {
      status = `Waiting Rewash #${rewashCount}`;
    }

    const washId = `WASH-${Date.now()}`;
    const newWash = {
      washId,
      empId,
      empName,
      uniformCode,
      color,
      size,
      createdAt: new Date().toISOString(),
      status,
      rewashCount,
    };

    await addWashJob(newWash, washId);
    toggleModal(false);

    const updatedWashes = await getAllWashes();
    await renderWashTable(updatedWashes);
    await renderWashSummary(updatedWashes);

    showToast("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
  } catch (err) {
    console.error("saveWashJob error:", err);
    showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", "error");
  } finally {
    hideLoading();
  }
}

// ‚úÖ ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å
export function confirmDeleteWash(id) {
  confirmDeleteModal(id, async (confirmedId) => {
    try {
      showLoading("üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• wash ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
      const wash = await getWashJobById(confirmedId);

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ã‡∏±‡∏Å ‚Üí ‡∏Ñ‡∏∑‡∏ô status ‡πÄ‡∏õ‡πá‡∏ô in-use
      if (wash && wash.status?.includes("Waiting")) {
        const snap = await getUniformByCode(wash.uniformCode, wash.color);
        if (snap.length > 0) {
          const docId = snap[0].id;
          await updateDoc(doc(db, "InventoryDB", docId), {
            status: "in-use",
            rewashCount: wash.rewashCount || 0,
          });
        }
      }
      await deleteWashJob(confirmedId);

      const washes = await getAllWashes();
      await renderWashTable(washes);
      await renderWashSummary(washes);

      showToast("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
    } catch (error) {
      console.error("‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
      showToast("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
    } finally {
      hideLoading();
    }
  });
}

// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export async function openEditWash(id) {
  const data = await getWashJobById(id);
  if (!data) return alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");

  document.getElementById("editIndex").value = id;
  document.getElementById("uniformCode").value = data.uniformCode;
  document.getElementById("color").value = data.color;
  document.getElementById("empId").value = data.empId;
  document.getElementById("empName").value = data.empName;

  toggleModal(true);
}

// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô Modal ‡∏ü‡∏≠‡∏£‡πå‡∏°
function toggleModal(show) {
  const modal = document.getElementById("washModal"); // ‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  modal.style.display = show ? "flex" : "none";
  if (!show) clearForm();
}

function clearForm() {
  const fieldsToClear = [
    "empId",
    "empName",
    "uniformCode",
    "editIndex",
    "size",
  ];
  fieldsToClear.forEach((id) => {
    const el = document.getElementById(id);
    if (el) el.value = "";
  });

  const colorSelect = document.getElementById("color");
  if (colorSelect) {
    colorSelect.innerHTML = '<option value="">Select Color</option>';
    colorSelect.disabled = true;
  }
}

// ‚úÖ autofill ‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î
async function autofillUniformInfo() {
  const code = document.getElementById("uniformCode").value.trim();
  const sizeInput = document.getElementById("size");
  const colorSelect = document.getElementById("color");

  if (!code) return;

  const uniforms = await getUniformByCode(code);

  if (!uniforms.length) {
    sizeInput.value = "";
    colorSelect.innerHTML = '<option value="">No Color Available</option>';
    colorSelect.disabled = true;
    return;
  }

  // ‚úÖ ‡πÉ‡∏™‡πà Size
  sizeInput.value = uniforms[0].size || "";

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ
  const uniqueColors = [...new Set(uniforms.map((u) => u.color))];
  colorSelect.innerHTML = '<option value="">Select Color</option>';
  uniqueColors.forEach((color) => {
    const opt = document.createElement("option");
    opt.value = color;
    opt.textContent = color;
    colorSelect.appendChild(opt);
  });

  colorSelect.disabled = false;
}

// ‚úÖ autofill ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
async function autofillEmployeeInfo() {
  const code = document.getElementById("uniformCode").value.trim();
  const color = document.getElementById("color").value;
  const matches = await getUniformByCode(code, color);

  if (matches.length > 0) {
    const u = matches[0];
    document.getElementById("empId").value = u.employeeId || "";
    document.getElementById("empName").value = u.employeeName || "";
    document.getElementById("size").value = u.size || ""; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Size ‡∏î‡πâ‡∏ß‡∏¢
  } else {
    console.warn("üü° ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Employee ‡∏à‡∏≤‡∏Å UniformCode + Color");
  }
}

export function openAddWashModal() {
  clearForm();
  const modal = document.getElementById("washModal");
  document.getElementById("modalTitle").textContent = "Add Wash Job";
  modal.style.display = "flex";
}

export async function markAsESDPass(washData) {
  try {
    showLoading("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• ESD ‡∏ú‡πà‡∏≤‡∏ô...");

    await addToWashHistory({
      ...washData,
      testResult: "PASS",
      testDate: new Date().toISOString(),
      status: "ESD Passed",
    });

    await setRewashCount(washData.uniformCode, washData.color, 0);

    await returnToStockAfterESD(washData);

    const washes = await getAllWashes();
    await renderWashTable(washes);
    await renderWashSummary(washes);

    showToast("‚úÖ ESD ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
  } catch (err) {
    console.error("markAsESDPass error:", err);
    showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "error");
  } finally {
    hideLoading();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏¢‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Wash Job// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏¢‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Wash Job
export async function shiftWashDate(washId, days) {
  try {
    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const washJob = await getWashJobById(washId);
    if (!washJob) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å: ${washId}`);
      showToast("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å", "error");
      return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏ß‡∏±‡∏ô
    const newDate = new Date(washJob.createdAt);
    newDate.setDate(newDate.getDate() + days);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Firestore
    await updateWashJob(washId, { createdAt: newDate.toISOString() });

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await renderWashTable(await getAllWashes());
    await renderWashSummary();
    showToast(
      `‚úÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô ${newDate.toLocaleDateString()}`,
      "success"
    );
  } catch (err) {
    console.error("‚ùå shiftWashDate error:", err);
    showToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "error");
  }
}

export async function checkAndUpdateWashStatus(wash) {
  if (
    !wash.createdAt ||
    wash.status === "Scrap" ||
    wash.status === "ESD Passed"
  )
    return wash;

  const created = new Date(wash.createdAt);
  const now = new Date();
  const diffInDays = Math.floor((now - created) / (1000 * 60 * 60 * 24));
  const count = wash.rewashCount || 0;

  let newStatus = "";

  if (diffInDays >= 3) {
    newStatus = "Completed";
  } else if (diffInDays >= 1) {
    newStatus = count === 0 ? "Washing" : `Re-Washing #${count}`;
  } else {
    newStatus = count === 0 ? "Waiting to Send" : `Waiting Rewash #${count}`;
  }

  if (newStatus !== wash.status) {
    wash.status = newStatus;
    await updateWashJob(wash.id, { status: newStatus });
  }

  return wash;
}

export async function handleESDRequest(id) {
  try {
    showLoading("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ESD...");
    const data = await getWashJobById(id);
    if (!data || data.status !== "Completed") {
      showToast("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Completed", "warning");
      return;
    }
    openESDModal(data);
  } catch (err) {
    showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ESD", "error");
  } finally {
    markAsESDFail;
    hideLoading();
  }
}

export async function markAsESDFail(washData) {
  try {
    showLoading("‚õî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• ESD ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô...");

    await addToWashHistory({
      ...washData,
      testResult: "FAIL",
      testDate: new Date().toISOString(),
      status: "ESD Failed",
    });

    await deleteWashJob(washData.washId);

    const currentCount = await getRewashCount(
      washData.uniformCode,
      washData.color
    );
    const newCount = currentCount + 1;

    await setRewashCount(washData.uniformCode, washData.color, newCount);

    if (newCount > 3) {
      await scrapUniform(washData.uniformCode, washData.color);
    }
  } catch (err) {
    console.error("markAsESDFail error:", err);
    showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ESD ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô", "error");
  } finally {
    hideLoading();
  }
}

export async function handleESDTestFail(washData) {
  try {
    showLoading("‚õî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ESD ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô...");

    await markAsESDFail(washData);

    const washes = await getAllWashes();
    await renderWashTable(washes);
    await renderWashSummary(washes);

    showToast("‚ùå ESD ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô - ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "warning");
  } catch (err) {
    console.error("‚ùå handleESDTestFail error:", err);
    showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ESD ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô", "error");
  } finally {
    hideLoading();
  }
}

initWashPage();
