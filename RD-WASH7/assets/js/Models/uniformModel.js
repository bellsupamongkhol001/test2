// ============================ üìÅ UNIFORM MODEL ============================
// üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Uniform ‡∏à‡∏≤‡∏Å Firestore
// - Collection: "UniformsDB"
// - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö CRUD, Base64 Image, CSV Import/Export, Validation
// ========================================================================

import { db } from "../firebase/firebaseConfig.js";
import {
  collection,
  doc,
  getDocs,
  getDoc,
  setDoc,
  updateDoc,
  deleteDoc,
  query,
  orderBy,
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-firestore.js";

// ============================ üîß CONFIG ============================
const COLLECTION_NAME = "UniformsDB";
const uniformCollection = collection(db, COLLECTION_NAME);

// ============================ üîç FETCH ============================
/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Uniform ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
 * - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° uniformID (‡∏ñ‡πâ‡∏≤ orderBy ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí fallback ‡πÄ‡∏õ‡πá‡∏ô client-side sort)
 * @returns {Promise<Array<Object>>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function fetchAllUniforms() {
  try {
    const q = query(uniformCollection, orderBy("uniformID"));
    const snapshot = await getDocs(q);
    return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (e) {
    console.warn("‚ö†Ô∏è orderBy ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí fallback ‡πÄ‡∏õ‡πá‡∏ô client-side sort", e);
    const snapshot = await getDocs(uniformCollection);
    const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    return data.sort((a, b) =>
      (a.uniformID || "").localeCompare(b.uniformID || "")
    );
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å Firestore ‡∏ï‡∏≤‡∏° document ID
 * @param {string} id - ‡∏£‡∏´‡∏±‡∏™ document (Firebase doc ID)
 * @returns {Promise<Object|null>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
async function fetchUniformById(id) {
  if (!id) throw new Error("‚ö†Ô∏è [fetchUniformById] ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ Uniform ID");

  try {
    const ref = doc(db, COLLECTION_NAME, id);
    const snap = await getDoc(ref);
    return snap.exists() ? { id: snap.id, ...snap.data() } : null;
  } catch (error) {
    console.error(`‚ùå [fetchUniformById] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (ID: ${id})`, error);
    throw error;
  }
}

// ============================ ‚ûï CREATE ============================
/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Firestore
 * - ‡∏ñ‡πâ‡∏≤ ID ‡∏ã‡πâ‡∏≥‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°
 */
async function createUniform(data) {
  const id = data.uniformID?.trim();
  if (!id) throw new Error("‚ö†Ô∏è [createUniform] ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ Uniform ID");

  try {
    const docRef = doc(db, COLLECTION_NAME, id);
    const existing = await getDoc(docRef);

    if (existing.exists()) {
      throw new Error(`‚ö†Ô∏è ‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏´‡∏±‡∏™ ${id} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
    }

    await setDoc(docRef, data);
  } catch (error) {
    console.error(
      `‚ùå [createUniform] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (ID: ${id})`,
      error
    );
    throw error;
  }
}

// ============================ ‚úèÔ∏è UPDATE ============================
/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å ID
 * - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏∞‡πÇ‡∏¢‡∏ô Error
 * @param {string} id - ‡∏£‡∏´‡∏±‡∏™ Uniform (Document ID)
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
async function updateUniform(id, data) {
  if (!id) throw new Error("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ Uniform ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");

  try {
    const docRef = doc(db, COLLECTION_NAME, id);
    const existing = await getDoc(docRef);

    if (!existing.exists()) {
      throw new Error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${id}`);
    }

    await updateDoc(docRef, data);
  } catch (error) {
    console.error(`‚ùå [updateUniform] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (ID: ${id})`, error);
    throw error;
  }
}

// ============================ üóëÔ∏è DELETE ============================
/**
 * ‡∏•‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å Firestore ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™ ID
 * - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏à‡∏∞‡πÇ‡∏¢‡∏ô Error
 * @param {string} id - ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏° (Document ID)
 */
async function deleteUniform(id) {
  if (!id) throw new Error("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Uniform ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö");

  try {
    const docRef = doc(db, COLLECTION_NAME, id);
    const docSnap = await getDoc(docRef);

    if (!docSnap.exists()) {
      throw new Error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${id}`);
    }

    await deleteDoc(docRef);
  } catch (error) {
    console.error(`‚ùå [deleteUniform] ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ID: ${id})`, error);
    throw error;
  }
}

// ============================ üì§ EXPORT CSV ============================
/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Array ‡∏Ç‡∏≠‡∏á Object ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö UTF-8 (BOM) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Excel ‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô
 * @param {Array<Object>} dataArray - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ export
 * @param {Array<string>} headers - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ export
 * @returns {string} Blob URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
 */
function exportCSV(dataArray, headers) {
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ headers ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á string
  if (!Array.isArray(headers) || headers.some((h) => typeof h !== "string")) {
    throw new Error("‚ùå Headers ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á string ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV (Header)
  const csvRows = [headers.join(",")];

  // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Object ‡πÉ‡∏ô dataArray ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß CSV
  for (const row of dataArray) {
    const line = headers.map((h) => `"${row[h] ?? ""}"`).join(",");
    csvRows.push(line);
  }
}
  // ============================ üì• PARSE CSV ============================
  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° CSV ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á Object
   * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ , ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ""
   * @param {string} csvText - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° CSV (header ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å)
   * @returns {Array<Object>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Array ‡∏Ç‡∏≠‡∏á Object
   */
  function parseCSV(csvText) {
    const lines = csvText.trim().split('\n');
    const headers = lines[0].split(',').map(h => h.trim());
  
    return lines.slice(1).map(line => {
      const values = line.split(',').map(v => v.trim());
      const obj = {};
      headers.forEach((h, i) => {
        obj[h] = values[i];
      });
      return obj;
    });

    // üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô Object ‡∏ï‡∏≤‡∏° header
    return rows.slice(1).map((line) => {
      const values = line
        .split(",")
        .map((cell) => cell.replace(/(^"|"$)/g, "").trim());

      const obj = {};
      headers.forEach((key, i) => {
        obj[key] = values[i] ?? "";
      });
      return obj;
    });
  } 


// ============================ üß™ VALIDATION - UNIFORM ============================
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Uniform
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ: uniformID, uniformType, uniformSize, uniformColor
 * - Qty ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° >= 0
 * @param {Object} u - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°
 * @returns {boolean} - true = valid, false = invalid
 */
function isValidUniform(u) {
  if (!u || typeof u !== "object") return false;

  const { uniformID, uniformType, uniformSize, uniformColor, uniformQty } = u;

  const qty = parseInt(uniformQty ?? "0", 10);

  return (
    typeof uniformID === "string" &&
    uniformID.trim() !== "" &&
    typeof uniformType === "string" &&
    uniformType.trim() !== "" &&
    typeof uniformSize === "string" &&
    uniformSize.trim() !== "" &&
    typeof uniformColor === "string" &&
    uniformColor.trim() !== "" &&
    !isNaN(qty) &&
    qty >= 0
  );
}

// ============================ üì∑ IMAGE BASE64 UTILS ============================
/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô Base64 data URL
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Preview ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {File} file - ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 * @returns {Promise<string>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base64 ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
 */
function toBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = (error) => reject(error);
    reader.readAsDataURL(file);
  });
}

// ============================ üì¶ EXPORT: UNIFORM MODEL ============================

export const UniformModel = {
  fetchAllUniforms, // üîç ‡∏î‡∏∂‡∏á Uniform ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  fetchUniformById, // üîç ‡∏î‡∏∂‡∏á Uniform ‡∏ï‡∏≤‡∏° ID
  createUniform, // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Uniform ‡πÉ‡∏´‡∏°‡πà
  updateUniform, // ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Uniform ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  deleteUniform, // üóëÔ∏è ‡∏•‡∏ö Uniform
  parseCSV, // üì• ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° CSV ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå Object
  exportCSV, // üì§ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV Blob URL
  isValidUniform, // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Uniform
  toBase64, // üì∑ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô Base64
};
