import { db } from "../firebase/firebaseConfig.js";
import {
  collection,
  getDocs,
  doc,
  setDoc,
  deleteDoc,
  updateDoc,
  getDoc,
  query,
  where,
  addDoc,
  increment,
  deleteField,
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-firestore.js";

/* ============================== üîß COLLECTION NAMES ============================== */
const COLLECTIONS = {
  WASH: "WashJobs",
  HISTORY: "WashHistory",
  INVENTORY: "InventoryDB",
  EMPLOYEE: "EmployeesDB",
  UNIFORMS: "UniformsDB",
};

// ============================== üß∫ WASH JOBS ==============================

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Wash ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
 * @returns {Promise<Array>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wash ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Array
 */
export async function getAllWashes() {
  try {
    const snapshot = await getDocs(collection(db, COLLECTIONS.WASH));
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("‚ùå [getAllWashes] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ:", error);
    return [];
  }
}

/**
 * ‡∏î‡∏∂‡∏á Wash ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏≤‡∏Å ID
 * @param {string} id - ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Wash
 * @returns {Promise<Object|null>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wash ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
export async function getWashJobById(id) {
  try {
    const ref = doc(db, COLLECTIONS.WASH, id);
    const snap = await getDoc(ref);
    return snap.exists() ? { id: snap.id, ...snap.data() } : null;
  } catch (error) {
    console.error(`‚ùå [getWashJobById] ‡πÑ‡∏°‡πà‡∏û‡∏ö ID: ${id}`, error);
    return null;
  }
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Wash Job
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * @param {string|null} id - ‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà id ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 * @returns {Promise<string>} ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 */
export async function addWashJob(data, id = null) {
  try {
    const docId = id || data?.washId;

    if (typeof docId === "string" && docId.trim() !== "") {
      const docRef = doc(db, COLLECTIONS.WASH, docId);
      await setDoc(docRef, data);
      return docId;
    }

    const autoRef = await addDoc(collection(db, COLLECTIONS.WASH), data);
    return autoRef.id;

  } catch (error) {
    console.error("‚ùå [addWashJob] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ:", error);
    throw error;
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wash Job
 * @param {string} id - ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export async function updateWashJob(id, data) {
  try {
    await updateDoc(doc(db, COLLECTIONS.WASH, id), data);
  } catch (error) {
    console.error(`‚ùå [updateWashJob] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${id}`, error);
    throw error;
  }
}

/**
 * ‡∏•‡∏ö Wash Job ‡∏ï‡∏≤‡∏° ID
 * @param {string} id - ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
 */
export async function deleteWashJob(id) {
  try {
    await deleteDoc(doc(db, COLLECTIONS.WASH, id));
  } catch (error) {
    console.error(`‚ùå [deleteWashJob] ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${id}`, error);
    throw error;
  }
}


// ============================== üßæ WASH HISTORY ==============================

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
 * @returns {Promise<Array>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• History ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Array
 */
export async function getAllWashHistory() {
  try {
    const snapshot = await getDocs(collection(db, COLLECTIONS.HISTORY));
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("‚ùå [getAllWashHistory] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ:", error);
    return [];
  }
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * @param {string|null} id - ‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà id ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î ID ‡πÄ‡∏≠‡∏á
 * @returns {Promise<string>} ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 */
export async function addToWashHistory(data, id = null) {
  try {
    const ref = collection(db, COLLECTIONS.HISTORY);
    if (id) {
      await setDoc(doc(ref, id), data);
      return id;
    }
    const docRef = await addDoc(ref, data);
    return docRef.id;
  } catch (error) {
    console.error("‚ùå [addToWashHistory] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    throw error;
  }
}


// ============================== üëï INVENTORY (UNIFORM CODE) ==============================

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Uniform ‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏™‡∏µ
 * @param {string} code - ‡∏£‡∏´‡∏±‡∏™ UniformCode
 * @param {string|null} color - ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡πá‡πÑ‡∏î‡πâ)
 * @returns {Promise<Array>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
 */
export async function getUniformByCode(code, color = null) {
  try {
    const snap = await getDocs(collection(db, COLLECTIONS.INVENTORY));
    let uniforms = snap.docs.map(doc => ({ ...doc.data(), id: doc.id }));

    uniforms = uniforms.filter(u =>
      String(u.UniformCode || "").toLowerCase().includes(code.toLowerCase())
    );

    if (color) {
      uniforms = uniforms.filter(u => u.UniformColor === color);
    }

    return uniforms;
  } catch (error) {
    console.error("‚ùå [getUniformByCode] Failed:", error);
    return [];
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å UniformCode
 */
export async function getRewashCount(uniformCode, color) {
  const uniforms = await getUniformByCode(uniformCode, color);
  return uniforms.length > 0 ? uniforms[0].RewashCount || 0 : 0;
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ RewashCount ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
 */
export async function setRewashCount(code, color, count) {
  const uniforms = await getUniformByCode(code, color);
  if (uniforms.length === 0) return;

  const docId = uniforms[0].id;
  await updateDoc(doc(db, COLLECTIONS.INVENTORY, docId), {
    RewashCount: count,
  });
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ RewashCount ‡∏ó‡∏µ‡∏•‡∏∞ 1
 */
export async function incrementRewashCount(uniformCode, color) {
  const uniforms = await getUniformByCode(uniformCode, color);
  if (uniforms.length === 0) return;

  await updateDoc(doc(db, COLLECTIONS.INVENTORY, uniforms[0].id), {
    RewashCount: increment(1),
  });
}

/**
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡πá‡∏ô scrap
 */
export async function scrapUniform(uniformCode, color) {
  const uniforms = await getUniformByCode(uniformCode, color);
  if (uniforms.length === 0) return;

  const docId = uniforms[0].id;
  await updateDoc(doc(db, COLLECTIONS.INVENTORY, docId), {
    Status: "scrap",
    usageStatus: "scrap",
    "status.assign": deleteField(),
    "status.washing": deleteField(),
  });
}

/**
 * ‡∏Ñ‡∏∑‡∏ô‡∏¢‡∏π‡∏ô‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å ESD Test ‡πÄ‡∏™‡∏£‡πá‡∏à
 */
export async function returnToStockAfterESD(washData) {
  const uniforms = await getUniformByCode(washData.uniformCode, washData.color);
  if (uniforms.length === 0) return;

  const docId = uniforms[0].id;
  const current = uniforms[0];

  let newStatus = current.Status || "available";
  if (washData.status === "ESD Failed") {
    const count = (washData.rewashCount || 0) + 1;
    newStatus = `Rewash #${count}`;
  }

  await updateDoc(doc(db, COLLECTIONS.INVENTORY, docId), {
    Status: newStatus,
    usageStatus: newStatus === "available" ? "available" : "in-use",
  });

  await deleteWashJob(washData.washId); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wash
}

// ============================== üë§ EMPLOYEES ==============================‡∏´
/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å UniformCode ‡πÅ‡∏•‡∏∞‡∏™‡∏µ
 * ‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏à‡∏≤‡∏Å InventoryDB
 * @param {string} uniformCode
 * @param {string} color
 * @returns {Promise<{EmployeeID: string, EmployeeName: string} | null>}
 */
export async function getEmployeeByUniform(uniformCode, color) {
  const uniforms = await getUniformByCode(uniformCode, color);
  if (uniforms.length === 0) return null;

  const { EmployeeID, EmployeeName } = uniforms[0];
  return { EmployeeID, EmployeeName };
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (EmployeeID)
 * @param {string} empId
 * @returns {Promise<Object|null>}
 */
export async function getEmployeeById(empId) {
  try {
    const ref = doc(db, COLLECTIONS.EMPLOYEE, empId);
    const snap = await getDoc(ref);
    return snap.exists() ? snap.data() : null;
  } catch (error) {
    console.error("‚ùå getEmployeeById error:", error);
    return null;
  }
} 